{"version":3,"file":"runWindows.test.js","sourceRoot":"","sources":["../../src/e2etest/runWindows.test.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,yDAAkE;AAClE,uEAAkE;AAElE,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;IAC3D,MAAM,OAAO,GAAG,MAAM,IAAA,qCAAwB,EAC5C,GAAG,SAAS,sBAAsB,CACnC,CAAC;IACF,MAAM,OAAO,GAAG,MAAM,IAAA,qCAAwB,EAC5C,GAAG,SAAS,sBAAsB,CACnC,CAAC;IAEF,MAAM,CAAC,OAAO,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,MAAM,CAAC,OAAO,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEtC,MAAM,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAM,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAE3C,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;IACjE,MAAM,gBAAgB,GAAG,MAAM,IAAA,qCAAwB,EACrD,GAAG,SAAS,oBAAoB,CACjC,CAAC;IACF,MAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC;AACtC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;IAChD,KAAK,MAAM,aAAa,IAAI,qCAAiB,EAAE;QAC7C,iBAAiB;QACjB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3D,oBAAoB;QACpB,IACE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;YACzC,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EACzC;YACA,gFAAgF;YAChF,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;SAC/C;QAED,uBAAuB;QACvB,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACjD,MAAM,CAAC,aAAa,CAAC,WAAY,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,WAAY,CAAC,IAAI,EAAE,CAAC,CAAC;KAC5E;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {getAnonymizedProjectName} from '../runWindows/runWindows';\nimport {runWindowsOptions} from '../runWindows/runWindowsOptions';\n\ntest('getAnonymizedProjectName - Project Exists', async () => {\n  const fooName = await getAnonymizedProjectName(\n    `${__dirname}/projects/FooPackage`,\n  );\n  const barName = await getAnonymizedProjectName(\n    `${__dirname}/projects/BarPackage`,\n  );\n\n  expect(typeof fooName).toBe('string');\n  expect(typeof barName).toBe('string');\n\n  expect(fooName!.length).toBeGreaterThan(0);\n  expect(barName!.length).toBeGreaterThan(0);\n\n  expect(fooName).not.toBe(barName);\n});\n\ntest('getAnonymizedProjectName - Project Doesnt Exist', async () => {\n  const emptyPackageName = await getAnonymizedProjectName(\n    `${__dirname}/projects/BlankApp`,\n  );\n  expect(emptyPackageName).toBeNull();\n});\n\ntest('runWindowsOptions - validate options', () => {\n  for (const commandOption of runWindowsOptions) {\n    // Validate names\n    expect(commandOption.name).not.toBeNull();\n    expect(commandOption.name.startsWith('--')).toBe(true);\n    expect(commandOption.name).toBe(commandOption.name.trim());\n\n    // Validate defaults\n    if (\n      !commandOption.name.endsWith(' [string]') &&\n      !commandOption.name.endsWith(' [number]')\n    ) {\n      // Commander ignores defaults for flags, so leave undefined to prevent confusion\n      expect(commandOption.default).toBeUndefined();\n    }\n\n    // Validate description\n    expect(commandOption.description).not.toBeNull();\n    expect(commandOption.description!).toBe(commandOption.description!.trim());\n  }\n});\n"]}